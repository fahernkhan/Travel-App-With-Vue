name: CI/CD with DockerHub & AWS EC2 Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project version
        id: extract_version
        run: |
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/travel-ui:latest
            ${{ secrets.DOCKER_USERNAME }}/travel-ui:${{ steps.extract_version.outputs.VERSION }}

  deploy-to-ec2:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          cat ~/.ssh/ec2_key

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login ke Docker Hub
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Stop dan hapus container lama
            docker stop travel-ui || true
            docker rm travel-ui || true
            
            # Pull image terbaru
            docker pull ${{ secrets.DOCKER_USERNAME }}/travel-ui:latest
            
            # Jalankan container baru
            docker run -d \
              --name travel-ui \
              --restart always \
              -p 80:80 \
              -e NODE_ENV=production \
              ${{ secrets.DOCKER_USERNAME }}/travel-ui:latest
            
            # Cleanup
            docker system prune -f